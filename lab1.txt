Харківський національний університет радіоелектроніки Факультет комп’ютерних наук 



Кафедра програмної інженерії



ЗВІТ
з лабораторної роботи № 1
з дисципліни «Скриптові мови програмування»








Виконала:                                                                   Перевірив:
ст. гр. ПЗПІ-23-5                        		             ст. викладач катедри ПІ
Широченкова Тетяна                                                Сокорчук  Ігор Петрович







Харків 2025
1 ІСТОРІЯ ЗМІН

№
Дата
Версія звіту
Опис змін та виправлень
1
03.05.2025
0.1
Створено розділ «Завдання»
2
04.05.2025
0.1
Створено розділ «Опис Виконаної роботи»
3
05.05.2025
0.1
Створено розділи «Висновки»,  «Додаток А», «Додаток Б», «Додаток В»




















2 ЗАВДАННЯ

     Розробити Bash-скрипт, який виконує автоматизовану обробку CSV-файлу розкладу занять, експортованого з сайту https://cist.nure.ua, з метою перетворення його у формат, придатний для імпорту в Google Календар.
      Скрипт повинен зчитувати дані з вхідного файлу, виконувати необхідне форматування полів дати, часу, опису, місця проведення та інших атрибутів подій згідно з вимогами Google Calendar CSV. 
     При розробці необхідно використати базові засоби обробки текстових даних у Bash, зокрема команди select, ls, awk, sort, uniq, tee, cat, sed, iconv та інші, для забезпечення коректного перетворення даних та збереження результату у вихідний CSV-файл для імпорту.
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     



3 ОПИС ВИКОНАНОЇ РОБОТИ

     Для реалізації функціональності скрипта були застосовані класичні інструменти обробки текстових даних в середовищі Unix-подібних систем. Зокрема, утиліта iconv використовувалася для конвертації кодування вхідного CSV-файлу з Windows-1251 у UTF-8 для забезпечення коректного відображення кириличних символів. 
     Команда awk була основним засобом для парсингу CSV-даних, виділення необхідних стовпців, зміни їх порядку та форматування полів відповідно до вимог Google Calendar.
      За допомогою sed виконувалося масове редагування текстових рядків, зокрема приведення форматів дати та часу до стандарту ISO 8601.
     Інструменти sort та uniq застосовувалися для впорядкування даних та усунення дублікатів записів, що могли виникати під час обробки великих обсягів розкладу.
      За допомогою команди tee реалізовано одночасне виведення результатів обробки у файл та на екран для візуального контролю.
      Окрім цього, використання конструкції select дозволило створити інтерфейс вибору режиму роботи скрипта, що забезпечило зручність взаємодії з користувачем при виборі групи чи формату експорту. 
     Розроблене рішення дозволяє автоматизувати процес підготовки даних розкладу до імпорту в Google Календар, забезпечуючи коректне відображення розкладу занять у вигляді подій.






4 ВИСНОВКИ

     У результаті виконання лабораторної роботи було розроблено Bash-скрипт для автоматизованого перетворення CSV-файлу розкладу занять, експортованого з інформаційної системи https://cist.nure.ua, у формат, сумісний з вимогами імпорту до Google Календаря. 
     Отримано практичні навички використання стандартних утиліт командного рядка Linux для обробки текстових та табличних даних, зокрема awk, sed, iconv, sort, uniq, tee та інших.
     Реалізоване програмне забезпечення повністю відповідає поставленим функціональним вимогам, забезпечуючи коректне форматування розкладу та спрощуючи процес його інтеграції з календарними сервісами.
     
     
     
     
     
     
     
     
     
     







ДОДАТОК А
Відеозапис
Відеозапис презентації результатів лабораторної роботи: https://youtu.be/mjiCX_8fkXg
Хронологічний опис відеозапису:
00:00 Вступ
00:34 Особливості .csv у Google Calendar
00:55 Інтерактивний режим
02:53 Опція -q (--quiet)
03:18 Опція –help
03:53 Використання
04:06 Передаємо скрипту лише .csv файл
05:26 Версія
06:40 Реалізація
07:58 Обробка опцій
08:32 Пошук .csv файлу
09:05 Утиліта select
10:34 Конвертація файлу до UTF-8
11:14 Tmp файл
12:04 Запит групи
13:30 Пояснення частини з awk
14:20 Огляд розкладу







ДОДАТОК Б
Графічні матеріали


Рисунок Б.1 — Запит CSV файлу


Рисунок Б.2 — Запит групи


Рисунок Б.3 — Оброблений CSV файл




Рисунок Б.4 — Репрезентація імпортованого файла у Google Calendar















ДОДАТОК В
Програмний код

В.1 smp-pzpi-23-5-shyrochenkova-tetiana 
GitHub репозиторій:
https://github.com/NureShyrochenkovaTetiana/smp-pzpi-23-5-shyrochenkova-tetiana/blob/main/Lab1/smp-pzpi-23-5-shyrochenkova-tetiana-lab1/smp-pzpi-23-5-shyrochenkova-tetiana-lab1-code

  1 #!/bin/bash
  2
  3 VERSION="1.0"
  4
  5 print_help() {
  6 	echo "Usage: $(basename "$0") [--help | --version] | [[-q|--quiet] [CSV_FILE] [GROUP]]"
  7 }
  8
  9 print_version() {
 10 	echo "$(basename "$0") version $VERSION"
 11 }
 12
 13 quiet=false
 14 if [[ "$1" == "-q" || "$1" == "--quiet" ]]; then
 15 	quiet=true
 16 	shift
 17 fi
 18
 19 if [[ "$1" == "--help" ]]; then
 20 	print_help
 21 	exit 0
 22 elif [[ "$1" == "--version" ]]; then
 23 	print_version
 24 	exit 0
 25 fi
 26
 27 if [[ -z "$1" ]]; then
 28 	files=( $(find "$HOME" -type f -name "TimeTable_??_??_20??.csv" 2>/dev/null) )
 29 	if [[ ${#files[@]} -eq 0 ]]; then
 30     	echo "There is no such file."
 31     	exit 1
 32 	fi
 33 	echo "Choose the file:"
 34 	select file in "${files[@]}"; do
 35     	if [[ -n "$file" ]]; then
 36         	selected_file="$file"
 37         	break
 38     	else
 39         	echo "Invalid option, try again."
 40     	fi
 41 	done
 42 else
 43 	selected_file="$1"
 44 fi
 45
 46 echo "You chose: $selected_file"
 47
 48 tmp_path="/tmp/$(basename "$selected_file")"
 49 iconv -f WINDOWS-1251 -t UTF-8 "$selected_file" | tr '\r' '\n' > "$tmp_path"
 50
 51 groups=(
 52   "ПЗПІ-23-1"
 53   "ПЗПІ-23-2"
 54   "ПЗПІ-23-3"
 55   "ПЗПІ-23-4"
 56   "ПЗПІ-23-5"
 57   "ПЗПІ-23-6"
 58   "ПЗПІ-23-7"
 59   "ПЗПІ-23-8"
 60   "ПЗПІ-23-9"
 61 )
 62
 63 if [[ -z "$2" ]]; then
 64 echo "$3"
 65 echo "$2"
 66 	while true; do
 67     	echo "Choose the group:"
 68     	for i in "${!groups[@]}"; do
 69         	echo "$((i + 1)). ${groups[$i]}"
 70     	done
 71     	read -p "Choose the group number: " selected_number
 72     	if [[ "$selected_number" -ge 1 && "$selected_number" -le ${#groups[@]} ]]; then
 73         	selected_group="${groups[$((selected_number - 1))]}"
 74         	break
 75     	else
 76         	echo "Invalid option, try again."
 77     	fi
 78 	done
 79 else
 80     	selected_group=$2
 81 fi
 82
 83 echo ": $selected_group"
 84
 85 OUTPUT_FILE="$HOME/Google_$(basename "$selected_file")"
 86 echo "\"Subject\",\"Start Date\",\"Start Time\",\"End Date\",\"End Time\"" > "$OUTPUT_FILE"
 87
 88 awk -v group="$selected_group" 'BEGIN {
 89 	FPAT = "([^,]+)|(\"[^\"]+\")"
 90 	OFS = ","
 91 }
 92 NR > 1 {
 93 	for(i = 1; i <= NF; i++) {
 94     	sub(/^"/, "", $i)
 95     	sub(/"$/, "", $i)
 96 	}
 97
 98 	if ($1 ~ "^" group " -") {
 99     	start_date = $2
100     	end_date = $4
101     	start_time = $3
102     	end_time = $5
103
104     	split(start_date, start_arr, ".")
105     	start_date = start_arr[2] "/" start_arr[1] "/" start_arr[3]
106     	split(end_date, end_arr, ".")
107     	end_date = end_arr[2] "/" end_arr[1] "/" end_arr[3]
108
109     	start_time = (start_time ~ /AM|PM/) ? strftime("%H:%M", mktime("1970 01 01 " start_time)) : substr(start_time, 1, 5)
110     	end_time = (end_time ~ /AM|PM/) ? strftime("%H:%M", mktime("1970 01 01 " end_time)) : substr(end_time, 1, 5)
111
112     	print "\"" $12 "\",\"" start_date "\",\"" start_time "\",\"" end_date "\",\"" end_time "\",\"" $12 "\""
113 	}
114 }' "$tmp_path" >> "$OUTPUT_FILE"
115 echo "The result was saved to $OUTPUT_FILE"
116
117 if [[ "$quiet" == "false" ]]; then
118 	cat "$OUTPUT_FILE"
119 fi
8


